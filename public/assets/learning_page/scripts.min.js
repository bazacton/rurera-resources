(function ($) {
    $("body").append('<style id="lightbox-animations" type="text/css"></style>');
    $(document).on('change', '.chapter_dropdown', function (e) {
        var chapter_id = $(this).val();
        $(".sub_chapter_items").addClass('hide');
        $(".sub_chapter_item_id_" + chapter_id).removeClass('hide');
    });
    $(".chapter_dropdown").change();

    $(window).on("load", function () {
        var tab_id = getUrlParameter('quiz');
        if (tab_id != '' && tab_id != undefined && tab_id != 'undefined') {
            $('.tab-item[data-id="' + tab_id + '"]').trigger('click');
        }
    });

	

    var quiz_loaded = false;
    if( $(".quiz-start-btn").length > 0){
		
        var thisObj = $(".quiz-start-btn");
        var quiz_url = thisObj.data('quiz_url');
        var quiz_id = thisObj.data('id');
        var learning_journey = thisObj.data('learning_journey');
		var test_type = thisObj.data('test_type');
		var question_ids = thisObj.data('question_ids');
		var is_new = thisObj.data('is_new');
		var journey_item_id = thisObj.data('journey_item_id');
		var is_started_already = $(".default-loaded-data").attr('data-is_started_already');
		if( is_started_already == 'yes'){
			//rurera_loader($(".learning-page"), 'animation');
		}
		

        var quiz_type = localStorage.getItem('quiz_level_'+quiz_id);
        if( quiz_type != null && quiz_type != ''){
            quiz_url = quiz_url+'?quiz_level='+quiz_type;
        }
        //rurera_loader(thisObj, 'animation');
        $('.default-loaded-data').html('');

        jQuery.ajax({
            type: "GET",
            url: quiz_url,
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: {"learning_journey":learning_journey,"test_type":test_type,"question_ids":question_ids,"is_new":is_new, "journey_item_id" : journey_item_id},
            success: function (html) {
                quiz_loaded = true;
                //rurera_remove_loader(thisObj, 'page');
                
                $('.default-loaded-data').html(html);
                if($(".lms-sorting-fields").length > 0) {
                    $('.lms-sorting-fields').sortable({
                        animation: 150
                    });
                }
				if( is_started_already == 'yes'){
					$(".read-quiz-content").removeClass('rurera-hide');
					$(".quiz-start-btn").click();
					$(".pause-quiz").click();
					$(".pause-title").html('Welcome Back');
					$(".pause-description").html("You've already answered some of the questions! Would you like to continue with quiz ?");
				}

            }
        });
    }

    $(document).on('click', '.quiz-start-btn', function (e) {

        var thisObj = $(this);
        learningPageContent.html('');
        if( quiz_loaded == false){
            //rurera_loader(thisObj, 'animation');
            var quizLoadInterval = setInterval(function () {
                if( quiz_loaded == true){
                    clearInterval(quizLoadInterval);
                    learningPageContent.html($('.default-loaded-data').html());
                    $('.default-loaded-data').html('');
                    rurera_remove_loader(thisObj, 'page');
                    //question_layout_functions();
                    var quizQuestionID = $(".question-area-block").find('.question-fields').attr('data-question_id');
                    var Questioninterval = setInterval(function () {
                        TimerActive = (typeof TimerActive !== 'undefined' && rurera_is_valid_field(TimerActive)) ? TimerActive : true;
						if( TimerActive == true){
							var seconds_count = $(".question-step-"+quizQuestionID).attr('data-elapsed');
							seconds_count = parseInt(seconds_count) + parseInt(1);
							$(".question-step-"+quizQuestionID).attr('data-elapsed', seconds_count);
						}
                    }, 1000);

                    if( thisObj.hasClass('start-spell-quiz').length > 0){
                        thisObj.hasClass('start-spell-quiz').click();
                    }
					if (typeof onQuestionLoad === "function") {
						onQuestionLoad();
					}

                    init_question_functions();
                    quiz_default_functions();
					if( $('.question-layout-block .play-sentence-sound').length > 0){
						$('.question-layout-block .play-sentence-sound').click();
					}
					if($('.player-box-audio').length > 0){
						$('.player-box-audio').each(function() {
							var word_audio = this;
							var audioId = word_audio.id;
							var audio_anchor = $('.sound-icon[data-id="'+audioId+'"]');
							
							word_audio.addEventListener('ended', function() {
								
								audio_anchor.removeClass("pause");
							});
						});
					}
                }
            }, 1000);
        }else{
            rurera_loader(thisObj, 'animation');
            learningPageContent.html($('.default-loaded-data').html());
            $('.default-loaded-data').html('');
            //question_layout_functions();
            var quizQuestionID = $(".question-area-block").find('.question-fields').attr('data-question_id');
            var Questioninterval = setInterval(function () {
				TimerActive = (typeof TimerActive !== 'undefined') ? TimerActive : true;
				if( TimerActive == true){
					var seconds_count = $(".question-step-"+quizQuestionID).attr('data-elapsed');
					seconds_count = parseInt(seconds_count) + parseInt(1);
					$(".question-step-"+quizQuestionID).attr('data-elapsed', seconds_count);
				}
            }, 1000);
            rurera_remove_loader(thisObj, 'page');
            if( thisObj.hasClass('start-spell-quiz').length > 0){
                thisObj.hasClass('start-spell-quiz').click();
            }
			init_question_functions();
            quiz_default_functions();
			if (typeof onQuestionLoad === "function") {
					onQuestionLoad();
				}
			if( $('.question-layout-block .play-sentence-sound').length > 0){
				$('.question-layout-block .play-sentence-sound').click();
			}
			if($('.player-box-audio').length > 0){
				$('.player-box-audio').each(function() {
					var word_audio = this;
					var audioId = word_audio.id;
					var audio_anchor = $('.sound-icon[data-id="'+audioId+'"]');
					
					word_audio.addEventListener('ended', function() {
						
						audio_anchor.removeClass("pause");
					});
				});
			}
        }

    });

    $(document).on('click', '.quiz-start-btn-bk', function (e) {

        var thisObj = $(this);
        var quiz_url = $(this).data('quiz_url');
        rurera_loader($(this), 'animation');
        
        learningPageContent.html('');

        jQuery.ajax({
            type: "GET",
            url: quiz_url,
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: {},
            success: function (html) {
                rurera_remove_loader(thisObj, 'page');
                
                learningPageContent.html(html);
                init_question_functions();
                if($(".lms-sorting-fields").length > 0) {
                    $('.lms-sorting-fields').sortable({
                        animation: 150
                    });
                }

            }
        });
    });

    function rurera_loader(thisObj, loader_type) {

            switch (loader_type) {
                case "div":
                   thisObj.addClass('rurera-processing');
                   thisObj.append('<div class="rurera-button-loader" style="display: block;">\n\
                       <div class="spinner">\n\
                           <div class="double-bounce1"></div>\n\
                           <div class="double-bounce2"></div>\n\
                       </div>\n\
                   </div>');

                   break;

                case "button":
                    thisObj.wrap('<div class="rurera-loader-holder"></div>');
                    thisObj.closest('.rurera-loader-holder').addClass('rurera-processing');
                    thisObj.closest('.rurera-loader-holder').append('<div class="rurera-button-loader" style="display: block;">\n\
                        <div class="spinner">\n\
                            <div class="double-bounce1"></div>\n\
                            <div class="double-bounce2"></div>\n\
                        </div>\n\
                    </div>');

                    break;

                case "page":
                    $('body').addClass('rurera-processing');
                    $('body').append('<div class="rurera-button-loader" style="display: block;">\n\
                          <div class="spinner">\n\
                              <div class="double-bounce1"></div>\n\
                              <div class="double-bounce2"></div>\n\
                          </div>\n\
                      </div>');
                    break;

                case "animation":
                    $('body').addClass('rurera-processing');
                    var loader_no = Math.floor(Math.random() * (3 - 1 + 1)) + 1;
                    loader_no = 4;
                    $('body').append('<div class="rurera-button-loader" style="display: block;">\n\
                        <div class="preloader"><img src="/assets/default/img/preloaders/'+loader_no+'.webp"><span class="preloader-text">Sharpen your wits and get ready to unravel mind-bending questions and brain teasers in our upcoming quiz</span></div>\n\
                    </div>');

                    break;

            }
        }

    function rurera_remove_loader(thisObj, loader_type) {
        switch (loader_type) {
            case "button":
                thisObj.removeClass('rurera-processing');
                thisObj.unwrap('.rurera-loader-holder');
                $('body').removeClass('rurera-processing');
                $('body').find('.rurera-button-loader').remove();
                break;
            case "page":
                $('body').removeClass('rurera-processing');
                $('body').find('.rurera-button-loader').remove();
                break;
        }
    }

    var getUrlParameter = function getUrlParameter(sParam) {
        var sPageURL = window.location.search.substring(1),
            sURLVariables = sPageURL.split('&'),
            sParameterName,
            i;

        for (i = 0; i < sURLVariables.length; i++) {
            sParameterName = sURLVariables[i].split('=');

            if (sParameterName[0] === sParam) {
                return sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);
            }
        }
        return false;
    };


    function open_iframe() {
        /* The position of the container will be set to fixed, so set the top & left properties of the container */
        var thisObj = $('.learning-content-quiz');
        var bounding_box = thisObj.get(0).getBoundingClientRect();
        thisObj.css({top: bounding_box.top + 'px', left: bounding_box.left + 'px'});

        /* Set container to fixed position. Add animation */
        thisObj.addClass('in-animation');
        /* An empty container has to be added in place of the lightbox container so that the elements below don't come up
        Dimensions of this empty container is the same as the original container */
        $('<div id="empty-container"></div>').insertAfter(".learning-content-quiz");
        /* To animate the container from full-screen to normal, we need dynamic keyframes */
        var styles = '';
        styles = '@keyframes outlightbox {';
        styles += '0% {';
        styles += 'height: 100%;';
        styles += 'width: 100%;';
        styles += 'top: 0px;';
        styles += 'left: 0px;';
        styles += '}';
        styles += '50% {';
        styles += 'height: 200px;';
        styles += 'top: ' + bounding_box.y + 'px;';
        styles += '}';
        styles += '100% {';
        styles += 'height: 200px;';
        styles += 'width: 500px;';
        styles += 'top: ' + bounding_box.y + 'px;';
        styles += 'left: ' + bounding_box.x + 'px;';
        styles += '}';
        styles += '}';

        /* Add keyframe to CSS */
        $("#lightbox-animations").get(0).sheet.insertRule(styles, 0);

        /* Hide the window scrollbar */
        $("body").css('overflow', 'hidden');
        $("#close").fadeIn();
    }

    /* Click on close button when full-screen */
    $(document).on('click', '#close', function (e) {
        $("#close").hide();

        /* Window scrollbar normal */
        $("body").css('overflow', 'auto');

        /* Show animation */
        $(".learning-content-quiz").addClass('out-animation');
        $(".learning-content-quiz").html('');
        $(".learning-content-quiz").removeClass('out-animation');
        $(".learning-content-quiz").removeClass('in-animation');


        e.stopPropagation();
    });

    /* On animationend : from normal to full screen & full screen to normal */
    $(".learning-content-quiz").on('animationend', function (e) {
        /* On animation end from normal to full-screen */
        if (e.originalEvent.animationName == 'inlightbox') {
            $("#close").show();
        }
        /* On animation end from full-screen to normal */
        else if (e.originalEvent.animationName == 'outlightbox') {
            /* Remove fixed positioning, remove animation rules */
            $(".learning-content-quiz").removeClass('in-animation').removeClass('out-animation');

            /* Remove the empty container that was earlier added */
            $("#empty-container").remove();

            /* Delete the dynamic keyframe rule that was earlier created */
            $("#lightbox-animations").get(0).sheet.deleteRule(0);
        }
    });


    $('body').on('click', '.panel-file-manager', function (e) {
        e.preventDefault();
        $(this).filemanager('file', {prefix: '/laravel-filemanager'});
    });

    const learningPageContent = $('#learningPageContent');

    // disable right click
    // document.addEventListener('contextmenu', event => event.preventDefault(), false);

    $(document).ready(function () {
        const allItems = $('.tab-item');

        if (allItems && allItems.length && defaultItemType && defaultItemType !== '' && defaultItemId && defaultItemId !== '') {
            for (const item of allItems) {
                const $item = $(item);
                const type = $item.attr('data-type');
                const id = $item.attr('data-id');

                if (type === defaultItemType && id === defaultItemId) {
                    $item.trigger('click');

                    const collapse = $item.closest('.collapse');

                    if (collapse) {
                        collapse.collapse('show');
                    }
                }
            }
        }
    });


    $('body').on('click', '#collapseBtn', function () {
        const $tabs = $('.learning-page-tabs');

        $tabs.toggleClass('show');
    });

    if ($(window).width() < 992) {
        $('.learning-page-tabs').removeClass('show')
    }

    $('body').on('click', '.nav-item a', function () {
        const $tabs = $('.learning-page-tabs');

        if (!$tabs.hasClass('show')) {
            $tabs.addClass('show');
        }
    });

    $('body').on('click', '.tab-item', function () {
        const $this = $(this);

        if (!$this.hasClass('active')) {
            const type = $this.attr('data-type');
            const id = $this.attr('data-id');

            //
            $('.tab-item-info').slideUp();
            $('.tab-item').removeClass('active');
            $('.certificate-item').removeClass('active');

            $this.addClass('active');
            $this.find('.tab-item-info').slideDown();

            if ($(window).width() < 992) {
                $('.learning-page-tabs').removeClass('show')
            }

            if (type !== 'assignment') {
                addContentLoading();
                handleContent(id, type);
            }
        }
    });

    $('body').on('click', '#checkAgainSession', function () {
        const $this = $(this);

        const type = $this.attr('data-type');
        const id = $this.attr('data-id');

        addContentLoading();

        handleContent(id, type);
    });

    $('body').on('click', '.certificate-item', function () {
        const $this = $(this);

        $('.certificate-item').removeClass('active');
        $('.tab-item').removeClass('active');
        $this.addClass('active');

        const result = $this.attr('data-result');

        handleDownloadCertificateHtml(result);
    });


    function handleContent(itemId, itemType) {

        const data = {
            type: itemType,
            id: itemId,
        };

        $.post('/course/learning/itemInfo', data, function (result) {
            if (itemType === 'session') {
                const {session} = result;

                if (session) {
                    if (session.is_finished) {
                        handleLiveSessionFinishedHtml(session);
                    } else if (session.is_started) {
                        handleLiveSessionHtml(session);
                    } else {
                        handleLiveSessionNotStartedHtml(session);
                    }
                }
            } else if (itemType === 'file') {
                handleFileHtml(result.file); // if file is downloadable
            } else if (itemType === 'text_lesson') {
                handleTextLessonHtml(result.textLesson);
            } else if (itemType === 'quiz') {
                handleQuizHtml(result.quiz);
            }
        });
    }


    function handleDownloadCertificateHtml(result) {

        const title = downloadCertificateLang;
        const hint = enjoySharingYourCertificateWithOthersLang;
        const img = 'quiz.svg';

        let otherHtml = '';

        if (result && result !== '') {
            otherHtml = `
                <a href="/panel/quizzes/results/${result}/showCertificate" target="_blank" class="btn btn-primary btn-sm mt-15">${downloadLang}</a>
            `;
        } else {
            otherHtml = `
                <button type="button" disabled class="btn btn-primary btn-sm mt-15">${downloadLang}</button>
            `;
        }

        const html = handleContentBoxHtml(title, hint, img, otherHtml);

        learningPageContent.html(html);
    }

    function handleQuizHtml(quiz) {

        const title = quiz.title;
        const hint = goToTheQuizPageForMoreInformationLang;
        const img = 'quiz.svg';

        let otherHtml = '';

        if (quiz.can_try) {

            /*otherHtml = `
                <a href="/panel/quizzes/${quiz.id}/start" target="_blank" class="btn btn-primary btn-sm mt-15">${quizPageLang}</a>
            `;*/

            otherHtml = `
                <a href="javascript:;" data-id="${quiz.id}" data-quiz_url="/panel/quizzes/${quiz.id}/start" class="quiz-start-btn btn btn-primary btn-sm mt-15">Start Quiz</a>
                <div class="learning-content-quiz"></div>
            `;
        } else {
            otherHtml = `
                <button type="button" class="js-cant-start-quiz-toast btn btn-primary btn-sm mt-15 disabled">${quizPageLang}</button>
            `;
        }

        const html = handleLearningContentBoxHtml(title, hint, img, otherHtml);
        const page_link = `
                /panel/quizzes/${quiz.id}/start
            `;

        /*const html = `
                <iframe src="/panel/quizzes/${quiz.id}/start" style="width: 100%;border: none;height: 500px;"></iframe>
            `;*/

        /* console.log(page_link);
      fetch(page_link )
      .then((response) => response.text())
      .then((html) => {
          learningPageContent.html(html);
          sort_init();

      })
      .catch((error) => {
          console.warn(error);
      });
      */

        learningPageContent.html(html);
        sort_init();
    }

    function handleLiveSessionFinishedHtml(session) {

        const title = sessionIsFinishedLang;
        const hint = sessionIsFinishedHintLang;
        const img = 'live_session.svg';
        const otherHtml = `
                <a href="${courseUrl}" class="btn btn-white btn-sm mt-15">${coursePageLang}</a>
        `;

        const html = handleContentBoxHtml(title, hint, img, otherHtml, 'mt-10');

        learningPageContent.html(html);
    }

    function handleLiveSessionNotStartedHtml(session) {

        const title = sessionIsNotStartedYetLang;
        const hint = thisSessionWillBeStartedOnLang + ' ' + session.start_data;
        const img = 'live_session.svg';
        const otherHtml = `
            <div class="d-flex align-items-center mt-15">
                <button type="button" id="checkAgainSession" data-type="session" data-id="${session.id}" class="btn btn-primary btn-sm ">${checkAgainLang}</button>
                <a href="${courseUrl}" class="btn btn-white btn-sm ml-10">${coursePageLang}</a>
            </div>
        `;

        const html = handleContentBoxHtml(title, hint, img, otherHtml, 'mt-10');

        learningPageContent.html(html);
    }

    function handleLiveSessionHtml(session) {

        const title = sessionIsLiveLang;
        const hint = youCanJoinTheLiveNowLang;
        const img = 'live_session.svg';
        const otherHtml = `
            <div class="d-flex align-items-center mt-15">
                <a href="${session.join_url}" target="_blank" class="btn btn-primary btn-sm ">${joinTheClassLang}</a>
                <a href="${courseUrl}" class="btn btn-white btn-sm ml-10">${coursePageLang}</a>
            </div>
        `;

        const html = handleContentBoxHtml(title, hint, img, otherHtml, 'mt-10');

        learningPageContent.html(html);
    }

    function handleFileHtml(file) {

        if ((file.online_viewer && file.online_viewer !== '0') || (file.downloadable && file.downloadable !== '0')) {
            let html = '';

            if ((file.online_viewer && file.online_viewer !== '0')) {
                html += `<div class="d-flex flex-column p-10 h-100">`;

                html += `<iframe src="/ViewerJS/index.html#${file.file_path}" class="file-online-viewer rounded-sm ${(file.downloadable && file.downloadable !== '0') ? 'has-download-card' : ''}" frameborder="0" allowfullscreen></iframe>`;

                if ((file.downloadable && file.downloadable !== '0')) {
                    html += `<div class="d-flex align-items-center justify-content-between rounded-sm mt-15 p-15 border-dashed-gray300">
                                <span class="font-weight-bold text-dark">${downloadTheFileLang}</span>
                                <a href="${courseUrl}/file/${file.id}/download" class="btn btn-primary btn-sm" target="_blank">${downloadLang}</a>
                            </div>`;
                }

                html += `</div>`;

            } else if ((file.downloadable && file.downloadable !== '0')) {
                const title = downloadTheFileLang;
                const hint = file.title;
                const img = 'download.svg';
                const otherHtml = `<a href="${courseUrl}/file/${file.id}/download" class="btn btn-primary btn-sm mt-15" target="_blank">${downloadLang}</a>`;

                html += handleContentBoxHtml(title, hint, img, otherHtml);
            }

            learningPageContent.html(html);
        } else {
            switch (file.storage) {
                case 'upload':
                case 'youtube':
                case 'vimeo':
                case 'external_link':
                case 's3':

                    const $html = $('<div class="learning-content-video-player w-100"></div>');

                    learningPageContent.html($html);

                    handleVideoByFileId(file.id, $html, function () {

                    });

                    break;

                case 'google_drive':
                case 'iframe':
                    handleFileIframe(file.id);
                    break;
                case 'upload_archive':
                    const title = showHtmlFileLang;
                    const hint = file.title;
                    const img = 'download.svg';
                    const otherHtml = `<a href="${courseUrl}/file/${file.id}/showHtml" target="_blank" class="btn btn-primary btn-sm mt-15">${showLang}</a>`;

                    const html = handleContentBoxHtml(title, hint, img, otherHtml);

                    learningPageContent.html(html);
                    break;
            }

        }
    }

    function handleTextLessonHtml(textLesson) {
        let html = `<div class="text-lesson-content p-15 p-lg-30">
                    <h4 class="font-16 font-weight-bold text-dark">${textLesson.title}</h4>
                    <div class="pb-5 mt-15 main-image rounded-lg w-100">
                        <img src="${textLesson.image}" class="img-cover bg-gray200" alt="${textLesson.title}"/>
                    </div>

                    ${textLesson.content}
                </div>`;

        if (textLesson.attachments && Object.keys(textLesson.attachments).length) {
            html += `<div class="shadow-sm rounded-lg bg-white px-15 px-md-25 py-20 mt-20">
                    <h3 class=" font-16 font-weight-bold text-dark-blue">${attachmentsLang}</h3>

                    <div class="row mt-10">
                    `;

            Object.keys(textLesson.attachments).forEach(key => {
                const attachment = textLesson.attachments[key];

                html += `<div class="col-12 col-lg-3 mt-10 mt-lg-0">
                            <a href="${courseUrl}/file/${attachment.file.id}/download" class="d-flex align-items-center p-10 border border-gray200 rounded-sm">
                                <span class="chapter-icon bg-gray300 mr-10">
                                    <i data-feather="download-cloud" class="text-gray" width="16" height="16"></i>
                                </span>

                                <div class="">
                                    <span class="font-weight-500 font-14 text-dark-blue d-block">${attachment.file.title}</span>
                                    <span class="font-12 text-gray d-block">${attachment.file.file_type} | ${attachment.file.volume}</span>
                                </div>
                            </a>
                    </div>`;
            });

            html += `</div>
                </div>`;

        }

        learningPageContent.html(html);

        feather.replace();
    }

    function handleLearningContentBoxHtml(title, hint, img, html = null, titleClassName = null) {
        return `<div class="learning-title">
                        <h3 class="mb-5">${title}</h3>
                        <span class="font-12 font-weight-400 text-gray">${hint}</span>
                    </div>
                    <div class="d-flex align-items-center justify-content-center w-100">
                    <button id="collapseBtn" type="button" class="btn-transparent ml-auto ml-lg-20">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-menu"><line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="18" x2="21" y2="18"></line></svg>
                    </button>
                    <div class="learning-content-box d-flex align-items-center justify-content-center flex-column p-15 p-lg-30 rounded-lg">
                        <div class="learning-content-box-icon">
                            <img src="/assets/default/img/learning/${img}" alt="downloadable icon">
                        </div>
                        ${html ?? ''}
                    </div>
                </div>`
            ;
    }

    function handleContentBoxHtml(title, hint, img, html = null, titleClassName = null) {
        return `<div class="d-flex align-items-center justify-content-center w-100 h-100">
                    <button id="collapseBtn" type="button" class="btn-transparent ml-auto ml-lg-20">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-menu"><line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="18" x2="21" y2="18"></line></svg>
                    </button>
                    <div class="learning-content-box d-flex align-items-center justify-content-center flex-column p-15 p-lg-30 rounded-lg">
                        <div class="learning-content-box-icon">
                            <img src="/assets/default/img/learning/${img}" alt="downloadable icon">
                        </div>

                        <h4 class="font-16 font-weight-bold text-dark ${titleClassName ?? ''}">${title}</h4>

                        <span class="font-14 font-weight-500 text-gray mt-5">${hint}</span>

                        ${html ?? ''}
                    </div>
                </div>`
            ;
    }

    function addContentLoading() {
        const html = `<div class="learning-content-loading d-flex align-items-center justify-content-center flex-column w-100 h-100">
            <img src="/assets/default/img/loading.gif" alt="">
            <p class="mt-10">${pleaseWaitForTheContentLang}</p>
        </div>`;

        learningPageContent.html(html);
    }

    function contentEmptyStateHtml() {
        const html = `<div class="learning-page-forum-empty d-flex align-items-center justify-content-center flex-column">
            <div class="learning-page-forum-empty-icon d-flex align-items-center justify-content-center">
                <img src="/assets/default/img/learning/content-empty.svg" class="img-fluid" alt="">
            </div>

            <div class="d-flex align-items-center flex-column mt-10 text-center">
                <h3 class="font-20 font-weight-bold text-dark-blue text-center">${learningPageEmptyContentTitleLang}</h3>
                <p class="font-14 font-weight-500 text-gray mt-5 text-center">${learningPageEmptyContentHintLang}</p>
            </div>
        </div>`;

        learningPageContent.html(html);
    }

    function handleFileIframe(fileId) {
        $.post('/course/getFilePath', {file_id: fileId}, function (result) {

            if (result && result.code === 200) {
                const {storage, path} = result;

                const $iframeHtml = `<div class="learning-content-iframe">
                            ${path}
                        </div>`;

                learningPageContent.html($iframeHtml);
            } else {
                $.toast({
                    heading: notAccessToastTitleLang,
                    text: notAccessToastMsgLang,
                    bgColor: '#f63c3c',
                    textColor: 'white',
                    hideAfter: 10000,
                    position: 'bottom-right',
                    icon: 'error'
                });
            }
        }).fail(err => {
            $.toast({
                heading: notAccessToastTitleLang,
                text: notAccessToastMsgLang,
                bgColor: '#f63c3c',
                textColor: 'white',
                hideAfter: 10000,
                position: 'bottom-right',
                icon: 'error'
            });
        });
    }

    $('body').on('change', '.js-passed-lesson-toggle', function (e) {
        const $this = $(this);
        const course_id = $this.val();
        const item = $this.attr('data-item');
        const item_id = $this.attr('data-item-id');
        const status = this.checked;

        const data = {
            item: item,
            item_id: item_id,
            status: status
        };

        $.post('/course/' + course_id + '/learningStatus', data, function (result) {
            $.toast({
                heading: '',
                text: learningToggleLangSuccess,
                bgColor: '#43d477',
                textColor: 'white',
                hideAfter: 10000,
                position: 'bottom-right',
                icon: 'success'
            });

            setTimeout(() => {
                window.location.reload();
            }, 500);
        }).fail(err => {
            $this.prop('checked', !status);

            $.toast({
                heading: '',
                text: learningToggleLangError,
                bgColor: '#f63c3c',
                textColor: 'white',
                hideAfter: 10000,
                position: 'bottom-right',
                icon: 'error'
            });
        });
    });

    $('body').on('click', '.js-sequence-content-error-modal', function (e) {
        e.preventDefault();

        const passedError = $(this).attr('data-passed-error');
        const accessDaysError = $(this).attr('data-access-days-error');

        let html = '<ul class="list-group-custom">\n';
        if (passedError) {
            html += '<li class="font-14 mb-10">' + passedError + '</li>\n';
        }

        if (accessDaysError) {
            html += '<li class="font-14">' + accessDaysError + '</li>\n';
        }

        html += '</ul>';

        Swal.fire({
            icon: 'error',
            title: sequenceContentErrorModalTitle,
            html: html,
            showCancelButton: false,
            showConfirmButton: false,
            customClass: {
                content: 'p-0 text-left',
            },
            width: '30rem',
        });
    });

    $('body').on('click', '.js-save-history-message', function () {
        const $this = $(this);
        const $form = $this.closest('form');
        const action = $form.attr('action');
        const data = $form.serializeObject();

        $this.addClass('loadingbar primary').prop('disabled', true);

        $form.find('.invalid-feedback').text('');
        $form.find('.is-invalid').removeClass('is-invalid');

        $.post(action, data, function (result) {
            if (result && result.code === 200) {
                Swal.fire({
                    icon: 'success',
                    html: '<h3 class="font-20 text-center text-dark-blue">' + sendAssignmentSuccessLang + '</h3>',
                    showConfirmButton: false,
                });

                setTimeout(() => {
                    window.location.reload();
                }, 500);
            } else if (result && result.code === 401) {
                $.toast({
                    heading: result.errors.title,
                    text: result.errors.msg,
                    bgColor: '#f63c3c',
                    textColor: 'white',
                    hideAfter: 10000,
                    position: 'bottom-right',
                    icon: 'error'
                });

                $this.removeClass('loadingbar primary').prop('disabled', false);
            }
        }).fail(err => {
            $this.removeClass('loadingbar primary').prop('disabled', false);
            var errors = err.responseJSON;
            if (errors && errors.errors) {
                Object.keys(errors.errors).forEach((key) => {
                    const error = errors.errors[key];
                    let element = $form.find('[name="' + key + '"]');
                    element.addClass('is-invalid');
                    element.parent().find('.invalid-feedback').text(error[0]);
                });
            }
        });
    })

    $('body').on('click', '.js-save-history-rate', function () {
        const $this = $(this);
        const $form = $this.closest('form');
        const action = $form.attr('action');
        const data = $form.serializeObject();

        $this.addClass('loadingbar primary').prop('disabled', true);

        $form.find('.invalid-feedback').text('');
        $form.find('.is-invalid').removeClass('is-invalid');

        $.post(action, data, function (result) {
            if (result && result.code === 200) {
                Swal.fire({
                    icon: 'success',
                    html: '<h3 class="font-20 text-center text-dark-blue">' + saveAssignmentRateSuccessLang + '</h3>',
                    showConfirmButton: false,
                });

                setTimeout(() => {
                    window.location.reload();
                }, 500);
            } else if (result && result.code === 401) {
                $.toast({
                    heading: result.errors.title,
                    text: result.errors.msg,
                    bgColor: '#f63c3c',
                    textColor: 'white',
                    hideAfter: 10000,
                    position: 'bottom-right',
                    icon: 'error'
                });

                $this.removeClass('loadingbar primary').prop('disabled', false);
            }
        }).fail(err => {
            $this.removeClass('loadingbar primary').prop('disabled', false);
            var errors = err.responseJSON;
            if (errors && errors.errors) {
                Object.keys(errors.errors).forEach((key) => {
                    const error = errors.errors[key];
                    let element = $form.find('[name="' + key + '"]');
                    element.addClass('is-invalid');
                    element.parent().find('.invalid-feedback').text(error[0]);
                });
            }
        });
    });

    function errorToast(heading, text) {
        $.toast({
            heading: heading,
            text: text,
            bgColor: '#f63c3c',
            textColor: 'white',
            hideAfter: 10000,
            position: 'bottom-right',
            icon: 'error'
        });
    }

    $('body').on('click', '.js-not-access-toast', function (e) {
        e.preventDefault();

        if (notAccessToastTitleLang && notAccessToastMsgLang) {
            errorToast(notAccessToastTitleLang, notAccessToastMsgLang);
        }
    });

    $('body').on('click', '.js-cant-start-quiz-toast', function (e) {
        e.preventDefault();

        if (cantStartQuizToastTitleLang && cantStartQuizToastMsgLang) {
            errorToast(cantStartQuizToastTitleLang, cantStartQuizToastMsgLang);
        }
    });
})(jQuery);


/***********************************
 Left Sidebar Menu Toggle Function
 ***********************************/
$(window).on("load", function () {
    if ($(".panel-sidebar .sidebarNavToggle").length != "") {
        $(".panel-sidebar .sidebarNavToggle").click(function () {
            $("body").toggleClass("menu-closed");
        });
    }
});
/***********************************
 Right Sidebar Menu Toggle Function
 ***********************************/
$(window).on("load", function () {
    if ($(".lms-content-header .tab-toggle-btn").length != "") {
        $(".lms-content-header .tab-toggle-btn").click(function () {
            $("body").toggleClass("right-menu-closed");
        });
    }
});

$(document).on('click', '.icon-img', function (e) {
    $btn = $('.coin-marks-label');
    var $coin = $('<div class="markscoin">')
        .insertAfter($btn)
        .css({
            "left": 150,
            "top": 105
        })
        .animate({
            "top": 93,
            "left": 390
        }, 1000, function () {
            //$coin.remove();
        });
});


function makeBtn(tObj) {
    var btn = $("<span>", {
        class: "ui-icon ui-icon-close"
    }).appendTo(tObj);
    btn.click(function (e) {
        $(this).parent().remove();
    });
}


var is_caps = false;
$(document).on('click', '.virtual-keyboard input[type="button"]', function (e) {
	var character_value = $(this).val();
	if( character_value == ' '){
		return ;
	}
	if( character_value == 'Cap'){
		if( $(this).hasClass('activated')){
			$(this).removeClass('activated');
			is_caps = false;
		}else{
			$(this).addClass('activated');
			is_caps = true;
		}
	}else{
		const inputs = document.querySelectorAll('.quiz-input-fields .editor-field-inputs');
		character_value = character_value.toUpperCase();
		if( is_caps == false){
			character_value = character_value.toLowerCase();
		}
		for (let input of inputs) {
			if (input.value === '') {
				input.value = character_value;
				return;
			}
		}
	}
});

$(document).on('click', '.virtual-keyboard .delete', function (e) {
	const inputs = document.querySelectorAll('.quiz-input-fields .editor-field-inputs');
	var prev_input = null;
	for (let input of inputs) {
		if (input.value === '') {
			continue;
		}
		var prev_input = input;
	}
	if( prev_input != null){
		
		prev_input.value = '';
		return;
	}
});

$(document).on('click', '.keyboard-btn', function (e) {
	$(this).closest('.rurera-virtual-keyboard').find('.virtual-keyboard').toggleClass('rurera-hide');
	if (isMobileDevice()) {
		if( $(this).closest('.rurera-virtual-keyboard').find('.virtual-keyboard').hasClass('rurera-hide')){
			$(".editor-field-inputs").removeAttr('readonly');
		}else{
			$(".editor-field-inputs").attr('readonly', 'readonly');
		}
	}
});
